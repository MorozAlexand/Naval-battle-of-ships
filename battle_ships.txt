# собственные классы исключений
class BoardException(Exception):
    pass

class BoardOutException(BoardException):   # исключение когда игрок пытается выстрелить за пределы доски
    def __str__(self):
        return "Вы пытаетесь выстрелить за доску!"

class BoardUsedException(BoardException):
    def __str__(self):
        return "Вы уже стреляли в эту клетку"

class BoardWrongShipException(BoardException):
    pass


# класс "точка"
class Dot:
    def __init__(self, x, y):  # каждая точка описывается координатами по осям Х и У
        self.x = x
        self.y = y

    def __eq__(self, other):   # метод проверяет точки на равенство
        return self.x == other.x and self.y == other.y

    def __repr__(self):
        return f"Dot({self.x}, {self.y})"


# класс "Корабль"
class Ship:
    def __init__(self, bow, l, o):
        self.bow = bow
        self.l = l
        self.o = o
        self.lives = l

    @property
    def dots(self):
        ship_dots = []          # список всех точек корабля
        for i in range(self.l):
            # определение координат "носа" корабля
            cur_x = self.bow.x
            cur_y = self.bow.y

            if self.o == 0:     # размещение корабля по горизонтали
                cur_x += i

            elif self.o == 1:   # размещение корабля по вертикали
                cur_y += i

            ship_dots.append(Dot(cur_x, cur_y))

        return ship_dots

    def shooten(self, shot):
        return shot in self.dots


# класс "Игровое поле"
class Board:
    def __init__(self, hid=False, size=6):       # параметр hid информирует о том нужно ли скрывать корабли на доске или нет
        self.size = size
        self.hid = hid

        self.count = 0 # количество пораженных кораблей

        self.field = [["O"] * size for _ in range(size)]

        self.busy = []  # список хранящий занятые точки (кораблем или выстрелом)
        self.ships = []  # список кораблей находящихся на доске

    def __str__(self):
        res = ""
        res += "  | 1 | 2 | 3 | 4 | 5 | 6 |"
        for i, row in enumerate(self.field):
            res += f"\n{i + 1} | " + " | ".join(row) + " |"

        if self.hid:
            res = res.replace("■", "O")
        return res

    def out(self, d):  # метод определяющий находится ли точка в прделах игровой доски
        return not ((0 <= d.x < self.size) and (0 <= d.y < self.size))

